#!/usr/bin/env node
// Ghost Configuration for Heroku

var args = process.argv.slice(2);
var environment = "development";
if( args.length>0 && args[0] == "production"){
  environment = "production";
}


require("dotenv").config();

var fs = require('fs');
var path = require('path');

var appRoot = path.join(__dirname, '..');

function createConfig() {
  var fileStorage, storage;

  if (!!process.env.S3_ACCESS_KEY_ID) {
    fileStorage = true
    storage = {
      active: 's3',
      's3': {
        accessKeyId:     process.env.S3_ACCESS_KEY_ID,
        secretAccessKey: process.env.S3_ACCESS_SECRET_KEY,
        bucket:          process.env.S3_BUCKET_NAME,
        region:          process.env.S3_BUCKET_REGION,
        assetHost:       process.env.S3_ASSET_HOST_URL
      }
    }
  } else if (!!process.env.BUCKETEER_AWS_ACCESS_KEY_ID) {
    fileStorage = true
    storage = {
      active: 's3',
      's3': {
        accessKeyId:     process.env.BUCKETEER_AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.BUCKETEER_AWS_SECRET_ACCESS_KEY,
        bucket:          process.env.BUCKETEER_BUCKET_NAME,
        region:          process.env.S3_BUCKET_REGION,
        assetHost:       process.env.S3_ASSET_HOST_URL
      }
    }
  } else {
    fileStorage = false
    storage = {}
  }

  config = {
    url: process.env.PUBLIC_URL,
    logging: {
      level: "info",
      transports: ["stdout"]
    },
    mail: {
      transport: 'SMTP',
      options: {
        service: 'Mailgun',
        auth: {
          user: process.env.MAILGUN_SMTP_LOGIN,
          pass: process.env.MAILGUN_SMTP_PASSWORD
        }
      }
    },
    fileStorage: fileStorage,
    storage: storage,
    database: {
      client: 'mysql',
      connection: {
        host: process.env.DB_HOST,
        port: parseInt(process.env.DB_PORT) || 3306,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_DATABASE
      },
      pool: { min: 0, max: 5 },
      debug: false
    },
    server: {
      host: '0.0.0.0',
      port: process.env.PORT
    },
    paths: {
      contentPath: path.join(appRoot, '/content/')
    }
  };

  return config;
}

var configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, 'config.'+environment+'.json'), configContents);